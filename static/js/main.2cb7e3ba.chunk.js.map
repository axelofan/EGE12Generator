{"version":3,"sources":["component/FindNet.js","component/Get3rdMask.js","component/MaskCount.js","component/Min3rdMask.js","component/Max3rdMask.js","component/Min1Mask.js","component/Max1Mask.js","component/Min0Mask.js","component/Max0Mask.js","component/MaxAdress.js","component/MinAdress.js","generator.js","App.js","index.js"],"names":["FindNet","props","getBinary","n","toString","padStart","getBinaryAdress","adress","map","el","join","showAnswer","setState","state","data","this","ip","mask","onClick","className","net","React","Component","Get3rdMask","MaskCount","getBinaryMask","minMask","maxMask","call","i","minCount","maxCount","maskCount","Min3rdMask","Max3rdMask","Min1Mask","Max1Mask","Min0Mask","Max0Mask","MaxAdress","MinAdress","randint","min","max","rand","Math","random","round","generateMask","count1","result","byte","push","generateIp","generateNet","getRandomIp","tempMask","every","_el","j","App","getRandomTask","component","floor","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAiCeA,E,kDA9BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,UAAY,SAAAC,GAAC,OAAIA,EAAEC,SAAS,GAAGC,SAAS,EAAE,MALvB,EAOnBC,gBAAkB,SAAAC,GAAM,OAAIA,EAAOC,KAAI,SAAAC,GAAE,OAAE,EAAKP,UAAUO,MAAKC,KAAK,MAPjD,EASnBC,WAAa,kBAAM,EAAKC,SAAS,CAACD,YAAa,EAAKE,MAAMF,cAPtD,EAAKE,MAAL,eAAiBZ,EAAMa,MAFR,E,qDAYf,OACE,6BACE,wTAA4D,6BAA5D,sCACWC,KAAKF,MAAMG,GAAGN,KAAK,KAD9B,oCAC4CK,KAAKF,MAAMI,KAAKP,KAAK,MACjE,uBAAGQ,QAASH,KAAKJ,YAAY,0BAAMQ,UAAU,cAAhB,gDAC7B,yBAAKA,UAAWJ,KAAKF,MAAMF,WAAa,GAAK,QAC3C,ihBACA,uBAAGQ,UAAU,QAAO,0BAAMA,UAAU,QAAhB,cAApB,IAAkEJ,KAAKT,gBAAgBS,KAAKF,MAAMG,IAAI,6BACtG,0BAAMG,UAAU,QAAhB,QADA,IACoCJ,KAAKT,gBAAgBS,KAAKF,MAAMI,MAAM,6BAC1E,0BAAME,UAAU,QAAhB,WAFA,IAEwC,0BAAMA,UAAU,aAAaJ,KAAKT,gBAAgBS,KAAKF,MAAMO,MAFrG,KAGA,2WACA,2BAAG,0BAAMD,UAAU,QAAhB,mCAAH,IAAyCJ,KAAKF,MAAMO,IAAIV,KAAK,Y,GAxBrDW,IAAMC,WC8BbC,E,kDA7BX,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IAIVC,UAAY,SAAAC,GAAC,OAAIA,EAAEC,SAAS,GAAGC,SAAS,EAAE,MALvB,EAOnBC,gBAAkB,SAAAC,GAAM,OAAIA,EAAOC,KAAI,SAAAC,GAAE,OAAE,EAAKP,UAAUO,MAAKC,KAAK,MAPjD,EASnBC,WAAa,kBAAM,EAAKC,SAAS,CAACD,YAAa,EAAKE,MAAMF,cAPtD,EAAKE,MAAL,eAAiBZ,EAAMa,MAFR,E,qDAYf,OACE,6BACE,+HAA0BC,KAAKF,MAAMG,GAAGN,KAAK,KAA7C,2FAAqEK,KAAKF,MAAMO,IAAIV,KAAK,KAAzF,gdACA,uBAAGQ,QAASH,KAAKJ,YAAY,0BAAMQ,UAAU,cAAhB,gDAC7B,yBAAKA,UAAWJ,KAAKF,MAAMF,WAAa,GAAK,QAC3C,qsBACA,uBAAGQ,UAAU,QAAO,0BAAMA,UAAU,QAAhB,cAApB,IAAkEJ,KAAKb,UAAUa,KAAKF,MAAMG,GAAG,IAAI,6BACnG,0BAAMG,UAAU,QAAhB,QADA,IACmC,0BAAMA,UAAU,aAAaJ,KAAKb,UAAUa,KAAKF,MAAMI,KAAK,KAAW,6BAC1G,0BAAME,UAAU,QAAhB,WAFA,IAEyCJ,KAAKb,UAAUa,KAAKF,MAAMO,IAAI,KACvE,2WACA,2BAAG,0BAAMD,UAAU,QAAhB,mCAAH,IAAyCJ,KAAKF,MAAMI,KAAK,U,GAvB9CI,IAAMC,WCuChBE,E,kDAtCX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IAIVC,UAAY,SAAAC,GAAC,OAAIA,EAAEC,SAAS,GAAGC,SAAS,EAAE,MALvB,EAOnBC,gBAAkB,SAAAC,GAAM,OAAIA,EAAOC,KAAI,SAAAC,GAAE,OAAE,EAAKP,UAAUO,MAAKC,KAAK,MAPjD,EASnBe,cAAgB,WACd,IAAIC,EAAU,EAAKpB,gBAAgB,EAAKO,MAAMa,SAC1CC,EAAU,EAAKrB,gBAAgB,EAAKO,MAAMc,SAI9C,MAFW,GAAGnB,IAAIoB,KAAKF,GAAQ,SAACjB,EAAIoB,GAAL,OAAUH,EAAQG,KAAKF,EAAQE,GAAMpB,EAAK,QAbxD,EAkBnBE,WAAa,kBAAM,EAAKC,SAAS,CAACD,YAAa,EAAKE,MAAMF,cAhBtD,EAAKE,MAAL,eAAiBZ,EAAMa,MAFR,E,qDAqBf,OACE,6BACE,+HAA0BC,KAAKF,MAAMG,GAAGN,KAAK,KAA7C,2FAAqEK,KAAKF,MAAMO,IAAIV,KAAK,KAAzF,qRACA,uBAAGQ,QAASH,KAAKJ,YAAY,0BAAMQ,UAAU,cAAhB,gDAC7B,yBAAKA,UAAWJ,KAAKF,MAAMF,WAAa,GAAK,QAC3C,2nBACA,uBAAGQ,UAAU,QAAO,0BAAMA,UAAU,QAAhB,cAApB,IAAkEJ,KAAKT,gBAAgBS,KAAKF,MAAMG,IAAI,6BACtG,0BAAMG,UAAU,QAAhB,QADA,IACmC,0BAAMA,UAAU,aAAaJ,KAAKU,iBAAuB,6BAC5F,0BAAMN,UAAU,QAAhB,WAFA,IAEyCJ,KAAKT,gBAAgBS,KAAKF,MAAMO,MACzE,yIAA0BL,KAAKF,MAAMiB,SAArC,iBAAmDf,KAAKF,MAAMkB,SAA9D,0CACA,2BAAG,0BAAMZ,UAAU,QAAhB,mCAAH,IAAyCJ,KAAKF,MAAMmB,iB,GAhC1CX,IAAMC,WCuCfW,E,kDAtCX,WAAYhC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,UAAY,SAAAC,GAAC,OAAIA,EAAEC,SAAS,GAAGC,SAAS,EAAE,MALvB,EAOnBC,gBAAkB,SAAAC,GAAM,OAAIA,EAAOC,KAAI,SAAAC,GAAE,OAAE,EAAKP,UAAUO,MAAKC,KAAK,MAPjD,EASnBe,cAAgB,WACd,IAAIC,EAAU,EAAKxB,UAAU,EAAKW,MAAMa,QAAQ,IAC5CC,EAAU,EAAKzB,UAAU,EAAKW,MAAMc,QAAQ,IAIhD,MAFW,GAAGnB,IAAIoB,KAAKF,GAAQ,SAACjB,EAAIoB,GAAL,OAAUH,EAAQG,KAAKF,EAAQE,GAAMpB,EAAK,QAbxD,EAkBnBE,WAAa,kBAAM,EAAKC,SAAS,CAACD,YAAa,EAAKE,MAAMF,cAhBtD,EAAKE,MAAL,eAAiBZ,EAAMa,MAFR,E,qDAqBf,OACE,6BACE,+HAA0BC,KAAKF,MAAMG,GAAGN,KAAK,KAA7C,2FAAqEK,KAAKF,MAAMO,IAAIV,KAAK,KAAzF,okBACA,uBAAGQ,QAASH,KAAKJ,YAAY,0BAAMQ,UAAU,cAAhB,gDAC7B,yBAAKA,UAAWJ,KAAKF,MAAMF,WAAa,GAAK,QAC3C,qsBACA,uBAAGQ,UAAU,QAAO,0BAAMA,UAAU,QAAhB,cAApB,IAAkEJ,KAAKb,UAAUa,KAAKF,MAAMG,GAAG,IAAI,6BACnG,0BAAMG,UAAU,QAAhB,QADA,IACmC,0BAAMA,UAAU,aAAaJ,KAAKU,iBAAuB,6BAC5F,0BAAMN,UAAU,QAAhB,WAFA,IAEyCJ,KAAKb,UAAUa,KAAKF,MAAMO,IAAI,KACvE,sRAAoDL,KAAKb,UAAUa,KAAKF,MAAMa,QAAQ,IAAtF,mVACA,2BAAG,0BAAMP,UAAU,QAAhB,mCAAH,IAAyCJ,KAAKF,MAAMa,QAAQ,U,GAhCjDL,IAAMC,WCuChBY,E,kDAtCb,WAAYjC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,UAAY,SAAAC,GAAC,OAAIA,EAAEC,SAAS,GAAGC,SAAS,EAAE,MALvB,EAOnBC,gBAAkB,SAAAC,GAAM,OAAIA,EAAOC,KAAI,SAAAC,GAAE,OAAE,EAAKP,UAAUO,MAAKC,KAAK,MAPjD,EASnBe,cAAgB,WACd,IAAIC,EAAU,EAAKxB,UAAU,EAAKW,MAAMa,QAAQ,IAC5CC,EAAU,EAAKzB,UAAU,EAAKW,MAAMc,QAAQ,IAIhD,MAFW,GAAGnB,IAAIoB,KAAKF,GAAQ,SAACjB,EAAIoB,GAAL,OAAUH,EAAQG,KAAKF,EAAQE,GAAMpB,EAAK,QAbxD,EAkBnBE,WAAa,kBAAM,EAAKC,SAAS,CAACD,YAAa,EAAKE,MAAMF,cAhBxD,EAAKE,MAAL,eAAiBZ,EAAMa,MAFN,E,qDAqBjB,OACE,6BACE,+HAA0BC,KAAKF,MAAMG,GAAGN,KAAK,KAA7C,2FAAqEK,KAAKF,MAAMO,IAAIV,KAAK,KAAzF,okBACA,uBAAGQ,QAASH,KAAKJ,YAAY,0BAAMQ,UAAU,cAAhB,gDAC7B,yBAAKA,UAAWJ,KAAKF,MAAMF,WAAa,GAAK,QAC3C,qsBACA,uBAAGQ,UAAU,QAAO,0BAAMA,UAAU,QAAhB,cAApB,IAAkEJ,KAAKb,UAAUa,KAAKF,MAAMG,GAAG,IAAI,6BACnG,0BAAMG,UAAU,QAAhB,QADA,IACmC,0BAAMA,UAAU,aAAaJ,KAAKU,iBAAuB,6BAC5F,0BAAMN,UAAU,QAAhB,WAFA,IAEyCJ,KAAKb,UAAUa,KAAKF,MAAMO,IAAI,KACvE,4RAAqDL,KAAKb,UAAUa,KAAKF,MAAMc,QAAQ,IAAvF,mVACA,2BAAG,0BAAMR,UAAU,QAAhB,mCAAH,IAAyCJ,KAAKF,MAAMc,QAAQ,U,GAhC7CN,IAAMC,WCuChBa,E,kDAtCX,WAAYlC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,UAAY,SAAAC,GAAC,OAAIA,EAAEC,SAAS,GAAGC,SAAS,EAAE,MALvB,EAOnBC,gBAAkB,SAAAC,GAAM,OAAIA,EAAOC,KAAI,SAAAC,GAAE,OAAE,EAAKP,UAAUO,MAAKC,KAAK,MAPjD,EASnBe,cAAgB,WACd,IAAIC,EAAU,EAAKpB,gBAAgB,EAAKO,MAAMa,SAC1CC,EAAU,EAAKrB,gBAAgB,EAAKO,MAAMc,SAI9C,MAFW,GAAGnB,IAAIoB,KAAKF,GAAQ,SAACjB,EAAIoB,GAAL,OAAUH,EAAQG,KAAKF,EAAQE,GAAMpB,EAAK,QAbxD,EAkBnBE,WAAa,kBAAM,EAAKC,SAAS,CAACD,YAAa,EAAKE,MAAMF,cAhBtD,EAAKE,MAAL,eAAiBZ,EAAMa,MAFR,E,qDAqBf,OACE,6BACE,+HAA0BC,KAAKF,MAAMG,GAAGN,KAAK,KAA7C,2FAAqEK,KAAKF,MAAMO,IAAIV,KAAK,KAAzF,8aACA,uBAAGQ,QAASH,KAAKJ,YAAY,0BAAMQ,UAAU,cAAhB,gDAC7B,yBAAKA,UAAWJ,KAAKF,MAAMF,WAAa,GAAK,QAC3C,2nBACA,uBAAGQ,UAAU,QAAO,0BAAMA,UAAU,QAAhB,cAApB,IAAkEJ,KAAKT,gBAAgBS,KAAKF,MAAMG,IAAI,6BACtG,0BAAMG,UAAU,QAAhB,QADA,IACmC,0BAAMA,UAAU,aAAaJ,KAAKU,iBAAuB,6BAC5F,0BAAMN,UAAU,QAAhB,WAFA,IAEyCJ,KAAKT,gBAAgBS,KAAKF,MAAMO,MACzE,qOAA2CL,KAAKF,MAAMiB,UACtD,2BAAG,0BAAMX,UAAU,QAAhB,mCAAH,IAAyCJ,KAAKF,MAAMiB,gB,GAhC3CT,IAAMC,WCuCdc,E,kDAtCX,WAAYnC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,UAAY,SAAAC,GAAC,OAAIA,EAAEC,SAAS,GAAGC,SAAS,EAAE,MALvB,EAOnBC,gBAAkB,SAAAC,GAAM,OAAIA,EAAOC,KAAI,SAAAC,GAAE,OAAE,EAAKP,UAAUO,MAAKC,KAAK,MAPjD,EASnBe,cAAgB,WACd,IAAIC,EAAU,EAAKpB,gBAAgB,EAAKO,MAAMa,SAC1CC,EAAU,EAAKrB,gBAAgB,EAAKO,MAAMc,SAI9C,MAFW,GAAGnB,IAAIoB,KAAKF,GAAQ,SAACjB,EAAIoB,GAAL,OAAUH,EAAQG,KAAKF,EAAQE,GAAMpB,EAAK,QAbxD,EAkBnBE,WAAa,kBAAM,EAAKC,SAAS,CAACD,YAAa,EAAKE,MAAMF,cAhBtD,EAAKE,MAAL,eAAiBZ,EAAMa,MAFR,E,qDAqBf,OACE,6BACE,+HAA0BC,KAAKF,MAAMG,GAAGN,KAAK,KAA7C,2FAAqEK,KAAKF,MAAMO,IAAIV,KAAK,KAAzF,8aACA,uBAAGQ,QAASH,KAAKJ,YAAY,0BAAMQ,UAAU,cAAhB,gDAC7B,yBAAKA,UAAWJ,KAAKF,MAAMF,WAAa,GAAK,QAC3C,2nBACA,uBAAGQ,UAAU,QAAO,0BAAMA,UAAU,QAAhB,cAApB,IAAkEJ,KAAKT,gBAAgBS,KAAKF,MAAMG,IAAI,6BACtG,0BAAMG,UAAU,QAAhB,QADA,IACmC,0BAAMA,UAAU,aAAaJ,KAAKU,iBAAuB,6BAC5F,0BAAMN,UAAU,QAAhB,WAFA,IAEyCJ,KAAKT,gBAAgBS,KAAKF,MAAMO,MACzE,qOAA2CL,KAAKF,MAAMkB,UACtD,2BAAG,0BAAMZ,UAAU,QAAhB,mCAAH,IAAyCJ,KAAKF,MAAMkB,gB,GAhC3CV,IAAMC,WCuCde,E,kDAtCX,WAAYpC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,UAAY,SAAAC,GAAC,OAAIA,EAAEC,SAAS,GAAGC,SAAS,EAAE,MALvB,EAOnBC,gBAAkB,SAAAC,GAAM,OAAIA,EAAOC,KAAI,SAAAC,GAAE,OAAE,EAAKP,UAAUO,MAAKC,KAAK,MAPjD,EASnBe,cAAgB,WACd,IAAIC,EAAU,EAAKpB,gBAAgB,EAAKO,MAAMa,SAC1CC,EAAU,EAAKrB,gBAAgB,EAAKO,MAAMc,SAI9C,MAFW,GAAGnB,IAAIoB,KAAKF,GAAQ,SAACjB,EAAIoB,GAAL,OAAUH,EAAQG,KAAKF,EAAQE,GAAMpB,EAAK,QAbxD,EAkBnBE,WAAa,kBAAM,EAAKC,SAAS,CAACD,YAAa,EAAKE,MAAMF,cAhBtD,EAAKE,MAAL,eAAiBZ,EAAMa,MAFR,E,qDAqBf,OACE,6BACE,+HAA0BC,KAAKF,MAAMG,GAAGN,KAAK,KAA7C,2FAAqEK,KAAKF,MAAMO,IAAIV,KAAK,KAAzF,waACA,uBAAGQ,QAASH,KAAKJ,YAAY,0BAAMQ,UAAU,cAAhB,gDAC7B,yBAAKA,UAAWJ,KAAKF,MAAMF,WAAa,GAAK,QAC3C,2nBACA,uBAAGQ,UAAU,QAAO,0BAAMA,UAAU,QAAhB,cAApB,IAAkEJ,KAAKT,gBAAgBS,KAAKF,MAAMG,IAAI,6BACtG,0BAAMG,UAAU,QAAhB,QADA,IACmC,0BAAMA,UAAU,aAAaJ,KAAKU,iBAAuB,6BAC5F,0BAAMN,UAAU,QAAhB,WAFA,IAEyCJ,KAAKT,gBAAgBS,KAAKF,MAAMO,MACzE,+NAA0C,GAAGL,KAAKF,MAAMkB,UACxD,2BAAG,0BAAMZ,UAAU,QAAhB,mCAAH,IAAyC,GAAGJ,KAAKF,MAAMkB,gB,GAhC9CV,IAAMC,WCuCdgB,E,kDAtCX,WAAYrC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,UAAY,SAAAC,GAAC,OAAIA,EAAEC,SAAS,GAAGC,SAAS,EAAE,MALvB,EAOnBC,gBAAkB,SAAAC,GAAM,OAAIA,EAAOC,KAAI,SAAAC,GAAE,OAAE,EAAKP,UAAUO,MAAKC,KAAK,MAPjD,EASnBe,cAAgB,WACd,IAAIC,EAAU,EAAKpB,gBAAgB,EAAKO,MAAMa,SAC1CC,EAAU,EAAKrB,gBAAgB,EAAKO,MAAMc,SAI9C,MAFW,GAAGnB,IAAIoB,KAAKF,GAAQ,SAACjB,EAAIoB,GAAL,OAAUH,EAAQG,KAAKF,EAAQE,GAAMpB,EAAK,QAbxD,EAkBnBE,WAAa,kBAAM,EAAKC,SAAS,CAACD,YAAa,EAAKE,MAAMF,cAhBtD,EAAKE,MAAL,eAAiBZ,EAAMa,MAFR,E,qDAqBf,OACE,6BACE,+HAA0BC,KAAKF,MAAMG,GAAGN,KAAK,KAA7C,2FAAqEK,KAAKF,MAAMO,IAAIV,KAAK,KAAzF,waACA,uBAAGQ,QAASH,KAAKJ,YAAY,0BAAMQ,UAAU,cAAhB,gDAC7B,yBAAKA,UAAWJ,KAAKF,MAAMF,WAAa,GAAK,QAC3C,2nBACA,uBAAGQ,UAAU,QAAO,0BAAMA,UAAU,QAAhB,cAApB,IAAkEJ,KAAKT,gBAAgBS,KAAKF,MAAMG,IAAI,6BACtG,0BAAMG,UAAU,QAAhB,QADA,IACmC,0BAAMA,UAAU,aAAaJ,KAAKU,iBAAuB,6BAC5F,0BAAMN,UAAU,QAAhB,WAFA,IAEyCJ,KAAKT,gBAAgBS,KAAKF,MAAMO,MACzE,+NAA0C,GAAGL,KAAKF,MAAMiB,UACxD,2BAAG,0BAAMX,UAAU,QAAhB,mCAAH,IAAyC,GAAGJ,KAAKF,MAAMiB,gB,GAhC9CT,IAAMC,WCuCdiB,E,kDAtCX,WAAYtC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,UAAY,SAAAC,GAAC,OAAIA,EAAEC,SAAS,GAAGC,SAAS,EAAE,MALvB,EAOnBC,gBAAkB,SAAAC,GAAM,OAAIA,EAAOC,KAAI,SAAAC,GAAE,OAAE,EAAKP,UAAUO,MAAKC,KAAK,MAPjD,EASnBe,cAAgB,WACd,IAAIC,EAAU,EAAKpB,gBAAgB,EAAKO,MAAMa,SAC1CC,EAAU,EAAKrB,gBAAgB,EAAKO,MAAMc,SAI9C,MAFW,GAAGnB,IAAIoB,KAAKF,GAAQ,SAACjB,EAAIoB,GAAL,OAAUH,EAAQG,KAAKF,EAAQE,GAAMpB,EAAK,QAbxD,EAkBnBE,WAAa,kBAAM,EAAKC,SAAS,CAACD,YAAa,EAAKE,MAAMF,cAhBtD,EAAKE,MAAL,eAAiBZ,EAAMa,MAFR,E,qDAqBf,OACE,6BACE,+HAA0BC,KAAKF,MAAMG,GAAGN,KAAK,KAA7C,2FAAqEK,KAAKF,MAAMO,IAAIV,KAAK,KAAzF,mVACA,uBAAGQ,QAASH,KAAKJ,YAAY,0BAAMQ,UAAU,cAAhB,gDAC7B,yBAAKA,UAAWJ,KAAKF,MAAMF,WAAa,GAAK,QAC3C,2nBACA,uBAAGQ,UAAU,QAAO,0BAAMA,UAAU,QAAhB,cAApB,IAAkEJ,KAAKT,gBAAgBS,KAAKF,MAAMG,IAAI,6BACtG,0BAAMG,UAAU,QAAhB,QADA,IACmC,0BAAMA,UAAU,aAAaJ,KAAKU,iBAAuB,6BAC5F,0BAAMN,UAAU,QAAhB,WAFA,IAEyCJ,KAAKT,gBAAgBS,KAAKF,MAAMO,MACzE,qmBAAqH,GAAGL,KAAKF,MAAMiB,UACnI,2BAAG,0BAAMX,UAAU,QAAhB,mCAAH,aAAyC,EAAI,GAAGJ,KAAKF,MAAMiB,iB,GAhCjDT,IAAMC,WCuCfkB,E,kDAtCX,WAAYvC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,UAAY,SAAAC,GAAC,OAAIA,EAAEC,SAAS,GAAGC,SAAS,EAAE,MALvB,EAOnBC,gBAAkB,SAAAC,GAAM,OAAIA,EAAOC,KAAI,SAAAC,GAAE,OAAE,EAAKP,UAAUO,MAAKC,KAAK,MAPjD,EASnBe,cAAgB,WACd,IAAIC,EAAU,EAAKpB,gBAAgB,EAAKO,MAAMa,SAC1CC,EAAU,EAAKrB,gBAAgB,EAAKO,MAAMc,SAI9C,MAFW,GAAGnB,IAAIoB,KAAKF,GAAQ,SAACjB,EAAIoB,GAAL,OAAUH,EAAQG,KAAKF,EAAQE,GAAMpB,EAAK,QAbxD,EAkBnBE,WAAa,kBAAM,EAAKC,SAAS,CAACD,YAAa,EAAKE,MAAMF,cAhBtD,EAAKE,MAAL,eAAiBZ,EAAMa,MAFR,E,qDAqBf,OACE,6BACE,+HAA0BC,KAAKF,MAAMG,GAAGN,KAAK,KAA7C,2FAAqEK,KAAKF,MAAMO,IAAIV,KAAK,KAAzF,mVACA,uBAAGQ,QAASH,KAAKJ,YAAY,0BAAMQ,UAAU,cAAhB,gDAC7B,yBAAKA,UAAWJ,KAAKF,MAAMF,WAAa,GAAK,QAC3C,2nBACA,uBAAGQ,UAAU,QAAO,0BAAMA,UAAU,QAAhB,cAApB,IAAkEJ,KAAKT,gBAAgBS,KAAKF,MAAMG,IAAI,6BACtG,0BAAMG,UAAU,QAAhB,QADA,IACmC,0BAAMA,UAAU,aAAaJ,KAAKU,iBAAuB,6BAC5F,0BAAMN,UAAU,QAAhB,WAFA,IAEyCJ,KAAKT,gBAAgBS,KAAKF,MAAMO,MACzE,qmBAAqH,GAAGL,KAAKF,MAAMkB,UACnI,2BAAG,0BAAMZ,UAAU,QAAhB,mCAAH,aAAyC,EAAI,GAAGJ,KAAKF,MAAMkB,iB,GAhCjDV,IAAMC,W,MCK9B,SAASmB,EAAQC,EAAKC,GAClB,IAAIC,EAAOF,EAAM,GAAMG,KAAKC,UAAYH,EAAMD,EAAM,GACpD,OAAOG,KAAKE,MAAMH,GAoBtB,SAASI,EAAaC,GAGlB,IAFA,IAAMC,EAAO,GACPC,EAAO,CAAC,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5CtB,EAAE,EAAEA,EAAE,EAAEA,IACRoB,EAAO,EAAGC,EAAOE,KAAKD,EAAK,IAAUD,EAAOE,KAAKD,EAAKF,IAC1DA,EAAUA,GAAQ,EAAKA,GAAQ,EAAI,EAEvC,OAAOC,EAyCX,IARA,IAAMjC,EAAO+B,EAAcP,EAAQ,GAAG,KAChCrB,EAzBN,SAAqBH,GAGjB,IAFA,IAAIiC,EAAO,GACPlC,EA9BR,WAEI,IADA,IAAMkC,EAAO,GACLrB,EAAE,EAAEA,EAAE,EAAEA,IAAKqB,EAAOE,KAAKX,EAAQ,GAAG,MAC5C,OAAOS,EA2BEG,GACDxB,EAAE,EAAEA,EAAE,EAAEA,IAAKqB,EAAOE,KAAKpC,EAAGa,GAAKZ,EAAKY,IAC9C,OAAOqB,EAqBCI,CAAYrC,GAClBD,EAZN,SAAqBI,EAAKH,GAEtB,IADA,IAAMiC,EAAO,GACLrB,EAAE,EAAGA,EAAE,EAAGA,IACA,MAAVZ,EAAKY,GAAUqB,EAAOE,KAAKhC,EAAIS,IAC9BqB,EAAOE,KAAKhC,EAAIS,GAAGY,EAAQ,EAAE,IAAIxB,EAAKY,GAAG,IAElD,OAAOqB,EAMAK,CAAYnC,EAAKH,GAExBe,EAAU,EACVF,EAAW,GACXC,GAAY,E,WAERF,GACJ,IAAI2B,EAAWR,EAAanB,GACxB2B,EAASC,OAAM,SAACC,EAAIC,GAAL,OAAU3C,EAAG2C,GAAKH,EAASG,MAAQvC,EAAIuC,QACtD3B,IACGH,EAAEC,IAAUA,EAAWD,GACvBA,EAAEE,IAAUA,EAAWF,KAL1BA,EAAE,EAAGA,GAAG,GAAIA,IAAM,EAAlBA,GAUO,OAACZ,OAAMG,MAAKJ,KAAIgB,YAAWF,WAAUC,WAAUL,QAAUsB,EAAalB,GAAWH,QAASqB,EAAajB,IC9BvG6B,E,kDAvCb,WAAY3D,GAAQ,IAAD,8BACjB,cAAMA,IAIR4D,cAAgB,WACd,IAAIC,EAAY,GAmBhB,OAjBI,EAAKjD,MAAMmB,UAAU,GACvB8B,EAAUV,KACR,kBAAC,EAAD,CAAWtC,KAAQ,EAAKD,QACxB,kBAAC,EAAD,CAAUC,KAAQ,EAAKD,QACvB,kBAAC,EAAD,CAAUC,KAAQ,EAAKD,QACvB,kBAAC,EAAD,CAAUC,KAAQ,EAAKD,QACvB,kBAAC,EAAD,CAAUC,KAAQ,EAAKD,SAGrB,EAAE,EAAKA,MAAMa,QAAQ,IAAM,EAAKb,MAAMa,QAAQ,GAAG,KAAKoC,EAAUV,KAAK,kBAAC,EAAD,CAAYtC,KAAQ,EAAKD,SAC9F,EAAE,EAAKA,MAAMa,QAAQ,IAAM,EAAKb,MAAMa,QAAQ,GAAG,KAAKoC,EAAUV,KAAK,kBAAC,EAAD,CAAYtC,KAAQ,EAAKD,SAC9F,WAAI,GAAG,EAAKA,MAAMkB,UAAU,MAAM+B,EAAUV,KAAK,kBAAC,EAAD,CAAWtC,KAAQ,EAAKD,SACzE,WAAI,GAAG,EAAKA,MAAMiB,UAAU,MAAMgC,EAAUV,KAAK,kBAAC,EAAD,CAAWtC,KAAQ,EAAKD,UAE1EiD,EAAUV,KAAK,kBAAC,EAAD,CAAStC,KAAQ,EAAKD,QAAU,kBAAC,EAAD,CAAYC,KAAM,EAAKD,SAGpEiD,EADCjB,KAAKkB,MAAMlB,KAAKC,SAAWgB,EAAUE,UAtB7C,EAAKnD,MAAL,2BAAiBC,GAAjB,IAAuBH,YAAW,IAFjB,E,qDA6BjB,OACE,6BACE,2BAAG,0BAAMQ,UAAU,UAAhB,MAAH,o7FACCJ,KAAK8C,qB,GAjCIxC,IAAMC,WCZxB2C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.2cb7e3ba.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass FindNet extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {...props.data}\r\n    }\r\n\r\n    getBinary = n => n.toString(2).padStart(8,'0')\r\n\r\n    getBinaryAdress = adress => adress.map(el=>this.getBinary(el)).join('.')\r\n\r\n    showAnswer = () => this.setState({showAnswer: !this.state.showAnswer})\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <p>По заданным IP-адресу узла и маске определите адрес сети:<br/>\r\n            IP-адрес: {this.state.ip.join('.')} Маска: {this.state.mask.join('.')}</p>\r\n            <p onClick={this.showAnswer}><span className='hintButton'>Решение:</span></p>\r\n            <div className={this.state.showAnswer ? '' : 'hide'}>\r\n              <p>Запишем IP адрес и маску сети в двоичном виде. Найдём адрес сети используя поразрядную конъюнкцию.</p>\r\n              <p className='code'><span className='bold'>IP&nbsp;&nbsp;</span> {this.getBinaryAdress(this.state.ip)}<br/>\r\n              <span className='bold'>Mask</span> {this.getBinaryAdress(this.state.mask)}<br/>\r\n              <span className='bold'>Net&nbsp;</span> <span className='important'>{this.getBinaryAdress(this.state.net)}</span> </p>\r\n              <p>Переведём полученный значения в десятичный вид и запишем ответ</p>\r\n              <p><span className='bold'>Ответ:</span> {this.state.net.join('.')}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default FindNet","import React from 'react'\r\n\r\nclass Get3rdMask extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {...props.data}\r\n    }\r\n\r\n    getBinary = n => n.toString(2).padStart(8,'0')\r\n\r\n    getBinaryAdress = adress => adress.map(el=>this.getBinary(el)).join('.')\r\n\r\n    showAnswer = () => this.setState({showAnswer: !this.state.showAnswer})\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <p>Для узла с IP адресом {this.state.ip.join('.')} адрес сети равен {this.state.net.join('.')}. Чему равно значение третьего слева байта маски? Ответ запишите в виде десятичного числа.</p>\r\n            <p onClick={this.showAnswer}><span className='hintButton'>Решение:</span></p>\r\n            <div className={this.state.showAnswer ? '' : 'hide'}>\r\n              <p>Запишем третий байт IP адреса и адреса сети в двоичном виде. Подберём значения в маске так, чтобы выполнялась поразрядная конъюнкция.</p>\r\n              <p className='code'><span className='bold'>IP&nbsp;&nbsp;</span> {this.getBinary(this.state.ip[2])}<br/>\r\n              <span className='bold'>Mask</span> <span className='important'>{this.getBinary(this.state.mask[2])}</span><br/>\r\n              <span className='bold'>Net&nbsp;</span> {this.getBinary(this.state.net[2])}</p>\r\n              <p>Переведём полученное значение в десятичный вид и запишем ответ</p>\r\n              <p><span className='bold'>Ответ:</span> {this.state.mask[2]}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Get3rdMask","import React from 'react'\r\n\r\nclass MaskCount extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {...props.data}\r\n    }\r\n\r\n    getBinary = n => n.toString(2).padStart(8,'0')\r\n\r\n    getBinaryAdress = adress => adress.map(el=>this.getBinary(el)).join('.')\r\n\r\n    getBinaryMask = () => {\r\n      let minMask = this.getBinaryAdress(this.state.minMask)\r\n      let maxMask = this.getBinaryAdress(this.state.maxMask)\r\n\r\n      let mask = [].map.call(minMask,(el, i)=>(minMask[i]===maxMask[i]) ? el : '*')\r\n      \r\n      return mask\r\n    }\r\n\r\n    showAnswer = () => this.setState({showAnswer: !this.state.showAnswer})\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <p>Для узла с IP адресом {this.state.ip.join('.')} адрес сети равен {this.state.net.join('.')}. Для скольких различных значений маски это возможно?</p>\r\n            <p onClick={this.showAnswer}><span className='hintButton'>Решение:</span></p>\r\n            <div className={this.state.showAnswer ? '' : 'hide'}>\r\n              <p>Запишем IP адрес и адрес сети в двоичном виде. Подберём значения в маске так, чтобы выполнялась поразрядная конъюнкция.</p>\r\n              <p className='code'><span className='bold'>IP&nbsp;&nbsp;</span> {this.getBinaryAdress(this.state.ip)}<br/>\r\n              <span className='bold'>Mask</span> <span className='important'>{this.getBinaryMask()}</span><br/>\r\n              <span className='bold'>Net&nbsp;</span> {this.getBinaryAdress(this.state.net)}</p>\r\n              <p>В маске может быть от {this.state.minCount} до {this.state.maxCount} единиц.</p>\r\n              <p><span className='bold'>Ответ:</span> {this.state.maskCount}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default MaskCount","import React from 'react'\r\n\r\nclass Min3rdMask extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {...props.data}\r\n    }\r\n\r\n    getBinary = n => n.toString(2).padStart(8,'0')\r\n\r\n    getBinaryAdress = adress => adress.map(el=>this.getBinary(el)).join('.')\r\n\r\n    getBinaryMask = () => {\r\n      let minMask = this.getBinary(this.state.minMask[2])\r\n      let maxMask = this.getBinary(this.state.maxMask[2])\r\n\r\n      let mask = [].map.call(minMask,(el, i)=>(minMask[i]===maxMask[i]) ? el : '*')\r\n      \r\n      return mask\r\n    }\r\n\r\n    showAnswer = () => this.setState({showAnswer: !this.state.showAnswer})\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <p>Для узла с IP адресом {this.state.ip.join('.')} адрес сети равен {this.state.net.join('.')}. Чему равно наименьшее возможное значение третьего слева байта маски? Ответ запишите в виде десятичного числа.</p>\r\n            <p onClick={this.showAnswer}><span className='hintButton'>Решение:</span></p>\r\n            <div className={this.state.showAnswer ? '' : 'hide'}>\r\n              <p>Запишем третий байт IP адреса и адреса сети в двоичном виде. Подберём значения в маске так, чтобы выполнялась поразрядная конъюнкция.</p>\r\n              <p className='code'><span className='bold'>IP&nbsp;&nbsp;</span> {this.getBinary(this.state.ip[2])}<br/>\r\n              <span className='bold'>Mask</span> <span className='important'>{this.getBinaryMask()}</span><br/>\r\n              <span className='bold'>Net&nbsp;</span> {this.getBinary(this.state.net[2])}</p>\r\n              <p> Минимальный третий байт маски тогда примет вид {this.getBinary(this.state.minMask[2])}. Переведём полученное значение в десятичный вид и запишем ответ.</p>\r\n              <p><span className='bold'>Ответ:</span> {this.state.minMask[2]}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Min3rdMask","import React from 'react'\r\n\r\nclass Max3rdMask extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {...props.data}\r\n  }\r\n\r\n  getBinary = n => n.toString(2).padStart(8,'0')\r\n\r\n  getBinaryAdress = adress => adress.map(el=>this.getBinary(el)).join('.')\r\n\r\n  getBinaryMask = () => {\r\n    let minMask = this.getBinary(this.state.minMask[2])\r\n    let maxMask = this.getBinary(this.state.maxMask[2])\r\n\r\n    let mask = [].map.call(minMask,(el, i)=>(minMask[i]===maxMask[i]) ? el : '*')\r\n  \r\n    return mask\r\n  }\r\n\r\n  showAnswer = () => this.setState({showAnswer: !this.state.showAnswer})\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>Для узла с IP адресом {this.state.ip.join('.')} адрес сети равен {this.state.net.join('.')}. Чему равно наибольшее возможное значение третьего слева байта маски? Ответ запишите в виде десятичного числа.</p>\r\n        <p onClick={this.showAnswer}><span className='hintButton'>Решение:</span></p>\r\n        <div className={this.state.showAnswer ? '' : 'hide'}>\r\n          <p>Запишем третий байт IP адреса и адреса сети в двоичном виде. Подберём значения в маске так, чтобы выполнялась поразрядная конъюнкция.</p>\r\n          <p className='code'><span className='bold'>IP&nbsp;&nbsp;</span> {this.getBinary(this.state.ip[2])}<br/>\r\n          <span className='bold'>Mask</span> <span className='important'>{this.getBinaryMask()}</span><br/>\r\n          <span className='bold'>Net&nbsp;</span> {this.getBinary(this.state.net[2])}</p>\r\n          <p> Максимальный третий байт маски тогда примет вид {this.getBinary(this.state.maxMask[2])}. Переведём полученное значение в десятичный вид и запишем ответ.</p>\r\n          <p><span className='bold'>Ответ:</span> {this.state.maxMask[2]}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Max3rdMask","import React from 'react'\r\n\r\nclass Min1Mask extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {...props.data}\r\n    }\r\n\r\n    getBinary = n => n.toString(2).padStart(8,'0')\r\n\r\n    getBinaryAdress = adress => adress.map(el=>this.getBinary(el)).join('.')\r\n\r\n    getBinaryMask = () => {\r\n      let minMask = this.getBinaryAdress(this.state.minMask)\r\n      let maxMask = this.getBinaryAdress(this.state.maxMask)\r\n\r\n      let mask = [].map.call(minMask,(el, i)=>(minMask[i]===maxMask[i]) ? el : '*')\r\n      \r\n      return mask\r\n    }\r\n\r\n    showAnswer = () => this.setState({showAnswer: !this.state.showAnswer})\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <p>Для узла с IP адресом {this.state.ip.join('.')} адрес сети равен {this.state.net.join('.')}. Найдите наименьшее возможное количество единиц в двоичной записи маски подсети.</p>\r\n            <p onClick={this.showAnswer}><span className='hintButton'>Решение:</span></p>\r\n            <div className={this.state.showAnswer ? '' : 'hide'}>\r\n              <p>Запишем IP адрес и адрес сети в двоичном виде. Подберём значения в маске так, чтобы выполнялась поразрядная конъюнкция.</p>\r\n              <p className='code'><span className='bold'>IP&nbsp;&nbsp;</span> {this.getBinaryAdress(this.state.ip)}<br/>\r\n              <span className='bold'>Mask</span> <span className='important'>{this.getBinaryMask()}</span><br/>\r\n              <span className='bold'>Net&nbsp;</span> {this.getBinaryAdress(this.state.net)}</p>\r\n              <p>Наименьшее количество единиц в маске - {this.state.minCount}</p>\r\n              <p><span className='bold'>Ответ:</span> {this.state.minCount}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Min1Mask","import React from 'react'\r\n\r\nclass Max1Mask extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {...props.data}\r\n    }\r\n\r\n    getBinary = n => n.toString(2).padStart(8,'0')\r\n\r\n    getBinaryAdress = adress => adress.map(el=>this.getBinary(el)).join('.')\r\n\r\n    getBinaryMask = () => {\r\n      let minMask = this.getBinaryAdress(this.state.minMask)\r\n      let maxMask = this.getBinaryAdress(this.state.maxMask)\r\n\r\n      let mask = [].map.call(minMask,(el, i)=>(minMask[i]===maxMask[i]) ? el : '*')\r\n      \r\n      return mask\r\n    }\r\n\r\n    showAnswer = () => this.setState({showAnswer: !this.state.showAnswer})\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <p>Для узла с IP адресом {this.state.ip.join('.')} адрес сети равен {this.state.net.join('.')}. Найдите наибольшее возможное количество единиц в двоичной записи маски подсети.</p>\r\n            <p onClick={this.showAnswer}><span className='hintButton'>Решение:</span></p>\r\n            <div className={this.state.showAnswer ? '' : 'hide'}>\r\n              <p>Запишем IP адрес и адрес сети в двоичном виде. Подберём значения в маске так, чтобы выполнялась поразрядная конъюнкция.</p>\r\n              <p className='code'><span className='bold'>IP&nbsp;&nbsp;</span> {this.getBinaryAdress(this.state.ip)}<br/>\r\n              <span className='bold'>Mask</span> <span className='important'>{this.getBinaryMask()}</span><br/>\r\n              <span className='bold'>Net&nbsp;</span> {this.getBinaryAdress(this.state.net)}</p>\r\n              <p>Наибольшее количество единиц в маске - {this.state.maxCount}</p>\r\n              <p><span className='bold'>Ответ:</span> {this.state.maxCount}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Max1Mask","import React from 'react'\r\n\r\nclass Min0Mask extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {...props.data}\r\n    }\r\n\r\n    getBinary = n => n.toString(2).padStart(8,'0')\r\n\r\n    getBinaryAdress = adress => adress.map(el=>this.getBinary(el)).join('.')\r\n\r\n    getBinaryMask = () => {\r\n      let minMask = this.getBinaryAdress(this.state.minMask)\r\n      let maxMask = this.getBinaryAdress(this.state.maxMask)\r\n\r\n      let mask = [].map.call(minMask,(el, i)=>(minMask[i]===maxMask[i]) ? el : '*')\r\n      \r\n      return mask\r\n    }\r\n\r\n    showAnswer = () => this.setState({showAnswer: !this.state.showAnswer})\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <p>Для узла с IP адресом {this.state.ip.join('.')} адрес сети равен {this.state.net.join('.')}. Найдите наименьшее возможное количество нулей в двоичной записи маски подсети.</p>\r\n            <p onClick={this.showAnswer}><span className='hintButton'>Решение:</span></p>\r\n            <div className={this.state.showAnswer ? '' : 'hide'}>\r\n              <p>Запишем IP адрес и адрес сети в двоичном виде. Подберём значения в маске так, чтобы выполнялась поразрядная конъюнкция.</p>\r\n              <p className='code'><span className='bold'>IP&nbsp;&nbsp;</span> {this.getBinaryAdress(this.state.ip)}<br/>\r\n              <span className='bold'>Mask</span> <span className='important'>{this.getBinaryMask()}</span><br/>\r\n              <span className='bold'>Net&nbsp;</span> {this.getBinaryAdress(this.state.net)}</p>\r\n              <p>Наименьшее количество нулей в маске - {32-this.state.maxCount}</p>\r\n              <p><span className='bold'>Ответ:</span> {32-this.state.maxCount}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Min0Mask","import React from 'react'\r\n\r\nclass Max0Mask extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {...props.data}\r\n    }\r\n\r\n    getBinary = n => n.toString(2).padStart(8,'0')\r\n\r\n    getBinaryAdress = adress => adress.map(el=>this.getBinary(el)).join('.')\r\n\r\n    getBinaryMask = () => {\r\n      let minMask = this.getBinaryAdress(this.state.minMask)\r\n      let maxMask = this.getBinaryAdress(this.state.maxMask)\r\n\r\n      let mask = [].map.call(minMask,(el, i)=>(minMask[i]===maxMask[i]) ? el : '*')\r\n      \r\n      return mask\r\n    }\r\n\r\n    showAnswer = () => this.setState({showAnswer: !this.state.showAnswer})\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <p>Для узла с IP адресом {this.state.ip.join('.')} адрес сети равен {this.state.net.join('.')}. Найдите наибольшее возможное количество нулей в двоичной записи маски подсети.</p>\r\n            <p onClick={this.showAnswer}><span className='hintButton'>Решение:</span></p>\r\n            <div className={this.state.showAnswer ? '' : 'hide'}>\r\n              <p>Запишем IP адрес и адрес сети в двоичном виде. Подберём значения в маске так, чтобы выполнялась поразрядная конъюнкция.</p>\r\n              <p className='code'><span className='bold'>IP&nbsp;&nbsp;</span> {this.getBinaryAdress(this.state.ip)}<br/>\r\n              <span className='bold'>Mask</span> <span className='important'>{this.getBinaryMask()}</span><br/>\r\n              <span className='bold'>Net&nbsp;</span> {this.getBinaryAdress(this.state.net)}</p>\r\n              <p>Наибольшее количество нулей в маске - {32-this.state.minCount}</p>\r\n              <p><span className='bold'>Ответ:</span> {32-this.state.minCount}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Max0Mask","import React from 'react'\r\n\r\nclass MaxAdress extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {...props.data}\r\n    }\r\n\r\n    getBinary = n => n.toString(2).padStart(8,'0')\r\n\r\n    getBinaryAdress = adress => adress.map(el=>this.getBinary(el)).join('.')\r\n\r\n    getBinaryMask = () => {\r\n      let minMask = this.getBinaryAdress(this.state.minMask)\r\n      let maxMask = this.getBinaryAdress(this.state.maxMask)\r\n\r\n      let mask = [].map.call(minMask,(el, i)=>(minMask[i]===maxMask[i]) ? el : '*')\r\n      \r\n      return mask\r\n    }\r\n\r\n    showAnswer = () => this.setState({showAnswer: !this.state.showAnswer})\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <p>Для узла с IP адресом {this.state.ip.join('.')} адрес сети равен {this.state.net.join('.')}. Чему равно наибольшее количество возможных адресов в этой сети?</p>\r\n            <p onClick={this.showAnswer}><span className='hintButton'>Решение:</span></p>\r\n            <div className={this.state.showAnswer ? '' : 'hide'}>\r\n              <p>Запишем IP адрес и адрес сети в двоичном виде. Подберём значения в маске так, чтобы выполнялась поразрядная конъюнкция.</p>\r\n              <p className='code'><span className='bold'>IP&nbsp;&nbsp;</span> {this.getBinaryAdress(this.state.ip)}<br/>\r\n              <span className='bold'>Mask</span> <span className='important'>{this.getBinaryMask()}</span><br/>\r\n              <span className='bold'>Net&nbsp;</span> {this.getBinaryAdress(this.state.net)}</p>\r\n              <p>Количество адресов зависит от количества нулей в маске как степень двойки. Наибольшее количество нулей в маске - {32-this.state.minCount}</p>\r\n              <p><span className='bold'>Ответ:</span> {2**(32-this.state.minCount)}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default MaxAdress","import React from 'react'\r\n\r\nclass MinAdress extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {...props.data}\r\n    }\r\n\r\n    getBinary = n => n.toString(2).padStart(8,'0')\r\n\r\n    getBinaryAdress = adress => adress.map(el=>this.getBinary(el)).join('.')\r\n\r\n    getBinaryMask = () => {\r\n      let minMask = this.getBinaryAdress(this.state.minMask)\r\n      let maxMask = this.getBinaryAdress(this.state.maxMask)\r\n\r\n      let mask = [].map.call(minMask,(el, i)=>(minMask[i]===maxMask[i]) ? el : '*')\r\n      \r\n      return mask\r\n    }\r\n\r\n    showAnswer = () => this.setState({showAnswer: !this.state.showAnswer})\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <p>Для узла с IP адресом {this.state.ip.join('.')} адрес сети равен {this.state.net.join('.')}. Чему равно наименьшее количество возможных адресов в этой сети?</p>\r\n            <p onClick={this.showAnswer}><span className='hintButton'>Решение:</span></p>\r\n            <div className={this.state.showAnswer ? '' : 'hide'}>\r\n              <p>Запишем IP адрес и адрес сети в двоичном виде. Подберём значения в маске так, чтобы выполнялась поразрядная конъюнкция.</p>\r\n              <p className='code'><span className='bold'>IP&nbsp;&nbsp;</span> {this.getBinaryAdress(this.state.ip)}<br/>\r\n              <span className='bold'>Mask</span> <span className='important'>{this.getBinaryMask()}</span><br/>\r\n              <span className='bold'>Net&nbsp;</span> {this.getBinaryAdress(this.state.net)}</p>\r\n              <p>Количество адресов зависит от количества нулей в маске как степень двойки. Наименьшее количество нулей в маске - {32-this.state.maxCount}</p>\r\n              <p><span className='bold'>Ответ:</span> {2**(32-this.state.maxCount)}</p>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default MinAdress","/**\r\n * Функция создания случайного числа из промежутка\r\n *\r\n * @param {Number} min начальное значение\r\n * @param {Number} max конечное значение\r\n * @returns {Number} случайное число из промежутка [min; max]\r\n */\r\nfunction randint(min, max) {\r\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    return Math.round(rand);\r\n}\r\n\r\n/**\r\n * Функция создания случайного IP адреса\r\n *\r\n * @returns {Array<Number>} случайный IP адрес в виде 4 целых чисел из диапазона 0..255\r\n */\r\nfunction generateIp() {\r\n    const result=[]\r\n    for(let i=0;i<4;i++) result.push(randint(10,223))\r\n    return result\r\n}\r\n\r\n/**\r\n * Функция создания маски сети по количеству единиц в ней\r\n *\r\n * @param {Number} count1 количество единиц в маске сети\r\n * @returns {Array<Number>} маска сети в виде 4 целых чисел из диапазона 0..255\r\n */\r\nfunction generateMask(count1) {\r\n    const result=[]\r\n    const byte = [0, 128, 192, 224, 240, 248, 252, 254, 255]\r\n    for(let i=0;i<4;i++) {\r\n        if (count1>8) result.push(byte[8]); else result.push(byte[count1])\r\n        count1 = (count1>=8) ? count1-=8 : 0\r\n    }\r\n    return result\r\n}\r\n\r\n/**\r\n * Функция создания случайного адреса сети, подходящего под предложенную маску\r\n *\r\n * @param {Array<Number>} mask маска сети в виде 4 целых числа из диапазона 0..255\r\n * @returns {Array<Number>} случайный адрес сети в виде 4 целых чисел из диапазона 0..255\r\n */\r\nfunction generateNet(mask) {\r\n    let result=[]\r\n    let ip = generateIp()\r\n    for(let i=0;i<4;i++) result.push(ip[i] & mask[i])\r\n    return result\r\n}\r\n\r\n/**\r\n * Функция создания случайного IP адреса, находящегося в данной сети\r\n *\r\n * @param {Array<Number>} net адрес сети в виде 4 целых числа из диапазона 0..255\r\n * @param {Array<Number>} mask маска сети в виде 4 целых числа из диапазона 0..255\r\n * @returns {Array<Number>} случайный IP адрес в виде 4 целых чисел из диапазона 0..255\r\n */\r\nfunction getRandomIp(net, mask) {\r\n    const result=[]\r\n    for(let i=0; i<4; i++) {\r\n        if (mask[i]===255) result.push(net[i])\r\n        else result.push(net[i]+randint(1,255-mask[i]-1))\r\n    }\r\n    return result\r\n}\r\n\r\n\r\nconst mask = generateMask( randint(17,23) )\r\nconst net = generateNet(mask)\r\nconst ip = getRandomIp(net, mask)\r\n\r\nlet maskCount=0\r\nlet minCount = 33\r\nlet maxCount = -1\r\n\r\nfor(let i=0; i<=32; i++) {\r\n    let tempMask = generateMask(i)\r\n    if (tempMask.every((_el,j)=>(ip[j] & tempMask[j]) === net[j])) {\r\n        maskCount++\r\n        if(i<minCount) minCount = i\r\n        if(i>maxCount) maxCount = i \r\n    }\r\n}\r\n\r\n\r\nexport default {mask, net, ip, maskCount, minCount, maxCount, minMask : generateMask(minCount), maxMask: generateMask(maxCount)}","import React from 'react';\r\n\r\nimport FindNet from './component/FindNet'\r\nimport Get3rdMask from './component/Get3rdMask'\r\nimport MaskCount from './component/MaskCount'\r\nimport Min3rdMask from './component/Min3rdMask'\r\nimport Max3rdMask from './component/Max3rdMask'\r\nimport Min1Mask from './component/Min1Mask'\r\nimport Max1Mask from './component/Max1Mask'\r\nimport Min0Mask from './component/Min0Mask'\r\nimport Max0Mask from './component/Max0Mask'\r\nimport MaxAdress from './component/MaxAdress'\r\nimport MinAdress from './component/MinAdress'\r\n\r\nimport './App.css'\r\nimport data from './generator'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {...data, showAnswer:false}\r\n  };\r\n\r\n  getRandomTask = () => {\r\n    let component = []\r\n\r\n    if (this.state.maskCount>1) {\r\n      component.push(\r\n        <MaskCount data = {this.state}/>, \r\n        <Min1Mask data = {this.state}/>, \r\n        <Max1Mask data = {this.state}/>, \r\n        <Min0Mask data = {this.state}/>,\r\n        <Max0Mask data = {this.state}/>\r\n      )\r\n\r\n      if (0<this.state.minMask[2] && this.state.minMask[2]<255) component.push(<Min3rdMask data = {this.state}/>)\r\n      if (0<this.state.minMask[2] && this.state.minMask[2]<255) component.push(<Max3rdMask data = {this.state}/>)\r\n      if (2**(32-this.state.maxCount)<1024) component.push(<MinAdress data = {this.state}/>)\r\n      if (2**(32-this.state.minCount)<1024) component.push(<MaxAdress data = {this.state}/>)\r\n    }\r\n    else component.push(<FindNet data = {this.state}/>, <Get3rdMask data={this.state}/>)\r\n    \r\n    let i = Math.floor(Math.random() * component.length)\r\n    return component[i]\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p><span className='number'>12</span> В терминологии сетей TCP/IP маской сети называется двоичное число, определяющее, какая часть IP-адреса узла сети относится к адресу сети, а какая – к адресу самого узла в этой сети. При этом в маске сначала (в старших разрядах) стоят единицы, а затем с некоторого места – нули. Обычно маска записывается по тем же правилам, что и IP-адрес, – в виде четырёх байтов, причём каждый байт записывается в виде десятичного числа. Адрес сети получается в результате применения поразрядной конъюнкции к заданному IP-адресу узла и маске. Например, если IP-адрес узла равен 131.32.255.131, а маска равна 255.255.240.0, то адрес сети равен 131.32.240.0.</p>\r\n        {this.getRandomTask()}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}